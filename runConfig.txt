def setupUi(self, Dialog):
...... OTHER CODE HERE
        self.pushButton.clicked.connect(self.runConfig)
        self.comboBox.activated.connect(self.listComms)
        self.commDrop()

     def runConfig(self):
      DI24 = self.DI24.value()
      if self.DI24_IsoCheck.isChecked() is True:
        ISODI24 = self.DI24_ISO.value()
      else:
        ISODI24 = 0
      DO24 = self.DO24.value()

      DI72 = self.DI72.value()
      if self.DI72_IsoCheck.isChecked() is True:
        ISODI72 = self.DI72_ISO.value()
      else:
        ISODI72 = 0
      DO72 = self.DO72.value()

      DI110 = self.DI110.value()
      if self.DI110_IsoCheck.isChecked() is True:
        ISODI110 = self.DI110_ISO.value()
      else:
        ISODI110 = 0
      DO110 = self.DO110.value()

      AI = self.AI.value()
      if self.DI24_IsoCheck.isChecked() is True:
        AIISO = self.AI_ISO.value()
      else:
        AIISO = 0
      AO = self.AO.value()

      AI_bool, AO_bool, DO24_bool = self.IOCheckboxes()
      AI_check = False
      AO_check = False
      if self.AI.value() == 0:
        AI_check = True
      if self.AO.value() == 0:
        AO_check = True
      if self.AI.value() != 0:
        for key in AI_bool:
          if AI_bool[key] is True:
            AI_check = True
      if self.AO.value() != 0:
        for key in AO_bool:
          if AO_bool[key] is True:
            AO_check = True

      if AI_check == True and AO_check == True:
        labeltext = config.IOconfigure(DI24, ISODI24, DO24, DI72, ISODI72, DO72, DI110, ISODI110, DO110, AI, AIISO, AO,
                                       AI_bool, AO_bool, DO24_bool)
        self.label_10.setText(labeltext)
      else:
        self.label_10.setText("Please select at least one analog type for both input and output")

    def listComms(self):
      text = self.comboBox.currentText()
      comms = config.getComms(text)
      commstring = "Modules with selected communications protocol: \n"
      for entry in comms:
        commstring += (entry + "\n")
      self.label_12.setText(commstring)

    # Populates communication protocol drop down list
    def commDrop(self):
      _translate = QtCore.QCoreApplication.translate
      commList = config.populateComms()
      count = 0
      for entry in commList:
        self.comboBox.addItem("")
        self.comboBox.setItemText(count, _translate("Dialog", entry))
        count += 1
      self.listComms()

    def IOCheckboxes(self):
        AIBool = dict()
        AOBool = dict()
        DOBool = dict()
        for i in range(self.AICheckboxes.count()):
            AIBool[self.AICheckboxes.itemAt(i).widget().objectName()] = self.AICheckboxes.itemAt(i).widget().isChecked()
        for j in range(self.AOCheckboxes.count()):
            AOBool[self.AOCheckboxes.itemAt(j).widget().objectName()] = self.AOCheckboxes.itemAt(j).widget().isChecked()
        for k in range(self.DO24Checkboxes.count()):
            DOBool[self.DO24Checkboxes.itemAt(k).widget().objectName()] = self.DO24Checkboxes.itemAt(k).widget().isChecked()
        return AIBool, AOBool, DOBool

    def retranslateUi(self, Dialog):
    ....... OTHER CODE HERE
        commList = config.populateComms()
        count = 0
        for entry in commList:
          self.comboBox.addItem("")
          self.comboBox.setItemText(count, _translate("Dialog", entry))
          count += 1
